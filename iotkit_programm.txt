/** Beispiel Abfrage Cloud Dienst Sunrise / Sunset
 */
#include "mbed.h"
#include <string>
#include "OLEDDisplay.h"
#include "http_request.h"
#include "MbedJSONValue.h"
#include "MFRC522.h"

// UI
OLEDDisplay oled( MBED_CONF_IOTKIT_OLED_RST, MBED_CONF_IOTKIT_OLED_SDA, MBED_CONF_IOTKIT_OLED_SCL );
// I/O Buffer
char message[6000];

DigitalOut myled( MBED_CONF_IOTKIT_LED1 );
MFRC522 rfidReader( MBED_CONF_IOTKIT_RFID_MOSI, MBED_CONF_IOTKIT_RFID_MISO, MBED_CONF_IOTKIT_RFID_SCLK, MBED_CONF_IOTKIT_RFID_SS, MBED_CONF_IOTKIT_RFID_RST );

char url[1024];

string convertToString(char* a, int size)
{
    int i;
    string s = "";
    for (i = 0; i < size; i++) {
        s = s + a[i];
    }
    return s;
}

int main()
{
    // Connect to the network with the default networking interface
    // if you use WiFi: see mbed_app.json for the credentials
    WiFiInterface* network = WiFiInterface::get_default_instance();
    if (!network) {
        printf("ERROR: No WiFiInterface found.\n");
        return -1;
    }
    printf("\nConnecting to %s...\n", MBED_CONF_APP_WIFI_SSID);
    int ret = network->connect(MBED_CONF_APP_WIFI_SSID, MBED_CONF_APP_WIFI_PASSWORD, NSAPI_SECURITY_WPA_WPA2);
    if (ret != 0) {
        printf("\nConnection error: %d\n", ret);
        return -1;
    }
    printf("Success\n\n");
    printf("MAC: %s\n", network->get_mac_address());
    SocketAddress a;
    network->get_ip_address(&a);
    printf("IP: %s\n", a.get_ip_address());  

    rfidReader.PCD_Init();
    while(true) 
    {
        if ( rfidReader.PICC_IsNewCardPresent())
                if ( rfidReader.PICC_ReadCardSerial()) 
                {
                    oled.cursor( 1, 0 );
                    oled.printf("Loading...");
                    // Print Card UID (2-stellig mit Vornullen, Hexadecimal)
                    printf("Card UID: ");
                    for ( int i = 0; i < rfidReader.uid.size; i++ )
                        printf("%02X:", rfidReader.uid.uidByte[i]);
                    printf("\n");

                    char buffer [rfidReader.uid.size * 2 + 1];
                    buffer[rfidReader.uid.size * 2] = 0;
                    for(int c = 0; c < rfidReader.uid.size; c++)
                        sprintf(&buffer[2*c], "%02X", rfidReader.uid.uidByte[c]);
                    for(int i = 0; i < rfidReader.uid.size * 2 + 1; i++){
                        printf("%c", buffer[i]);
                    }

                    char message[51] = "http://192.168.104.14:8750/Home/IsUIDAllowed?uID=";
                    strcat(message, buffer);
                    printf("%s \n", message);
                    HttpRequest* request = new HttpRequest(network, HTTP_GET, message);
                    request->set_header("Content-Type", "application/json");

                    HttpResponse* response = request->send();

                    printf("Status Code %d", response->get_status_code());

                    if(response->get_status_code() == 202){
                        printf("UID accepted");
                        oled.cursor( 1, 0 );
                        oled.printf("UID accepted");
                    }
                    else{
                        printf("\n UID declined");
                        oled.cursor( 1, 0 );
                        oled.printf("UID declined");
                    }
                }
            thread_sleep_for ( 200 ); 
    }
}
